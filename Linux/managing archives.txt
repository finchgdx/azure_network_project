Step 1: Create, Extract, Compress, and Manage tar Backup Archives
Command to extract the TarDocs.tar archive to the current directory: sudo tar xvvf TarDocs.tar


Command to create the Javaless_Doc.tar archive from the TarDocs/ directory, while excluding the TarDocs/Documents/Java directory: sudo tar cvf Javaless_Doc.tar --exclude='TarDocs/Documents/Java' /home/sysadmin/Projects/TarDocs


Command to ensure Java/ is not in the new Javaless_Docs.tar archive: sysadmin@UbuntuDesktop:~/Projects/TarDocs$ tar -tvvf Javaless_Doc.tar | grep -i Java
-rwxr-xr-x instructor/instructor      453 2015-07-26 17:24 home/sysadmin/Projects/TarDocs/Programs/NetBeansProjects/HelloWorldApp/src/helloworldapp/HelloWorldApp.java
sysadmin@UbuntuDesktop:~/Projects/TarDocs$ 

Bonus
Command to create an incremental archive called logs_backup_tar.gz with only changed files to snapshot.file for the /var/log directory:  sudo tar cvvfz /auth_backup/logs_backup_tar.gz --listed-incremental=snapshot.file /var/log
Critical Analysis Question
Why wouldn't you use the options -x and -c at the same time with tar? Because x is extract and c is create.  

Step 2: Create, Manage, and Automate Cron Jobs
Cron job for backing up the /var/log/auth.log file: 0 6 * * 3 tar cvvfz /auth_backup.tgz /var/log/auth.log

Step 3: Write Basic Bash Scripts
Brace expansion command to create the four subdirectories: mkdir -p ~/backups/{freemem,diskuse,openlist,freedisk}


Paste your system.sh script edits below:

 #!/bin/bash
free -hm >> ~/backups/freemem/free_mem.txt
df -h >> ~/backups/diskuse/disk_usage.txt 
lsof >> ~/backups/openlist/open_list.txt
df -hk >> ~/backups/freedisk/free_disk.txt

Command to make the system.sh script executable: sudo chmod +x system.sh


Optional
Commands to test the script and confirm its execution: sysadmin@UbuntuDesktop:~$ sudo ./system.sh && echo SUCCESS || echo FAIL
lsof: WARNING: can't stat() fuse.gvfsd-fuse file system /run/user/1000/gvfs
      Output information may be incomplete.
SUCCESS
Bonus
Command to copy system to system-wide cron directory: sudo cp system.sh ../../etc/cron.weekly/

Step 4. Manage Log File Sizes
Run sudo nano /etc/logrotate.conf to edit the logrotate configuration file.

 Configure a log rotation scheme that backs up authentication messages to the /var/log/auth.log.


Add your config file edits below: cd /etc/logrotate.d
sudo nano auth
/var/log/auth.log {
        rotate7
        weekly
        notifempty
        compress
        delaycompress
        missingok
        endscript
}






Bonus: Check for Policy and File Violations
Command to verify auditd is active: systemctl -t service --all
Command to set number of retained logs and maximum log file size: sudo nano /etc/audit/auditd.conf


Add the edits made to the configuration file below:
max_log_file = 35 num_logs = 7


Command using auditd to set rules for /etc/shadow, /etc/passwd and /var/log/auth.log:


Add the edits made to the rules file below: 
## -w path-to-file -p permissions -k keyname
-w /etc/shadow -p wra -k hashpass_audit
-w /etc/passwd -p wra -k userpass_audit 
-w /var/log/auth.log -p wra -k authlog_audit


Command to restart auditd: systemctl restart auditd


Command to list all auditd rules: sudo cat /etc/audit/rules.d/audit.rules


Command to produce an audit report: sudo aureport -au


Create a user with sudo useradd attacker and produce an audit report that lists account modifications: sudo adduser attacker, sudo aureport -m


Command to use auditd to watch /var/log/cron: sudo auditctl -w /var/log/cron -k watch_cron 


Command to verify auditd rules: sysadmin@UbuntuDesktop:~$ sudo auditctl -l
-w /etc/shadow -p rwa -k hashpass_audit
-w /etc/passwd -p rwa -k userpass_audit
-w /var/log/auth.log -p rwa -k authlog_audit
-w /var/log/cron -p rwxa -k watch_cron




Bonus (Research Activity): Perform Various Log Filtering Techniques
Command to return journalctl messages with priorities from emergency to error: journalctl -p emerg..err


Command to check the disk usage of the system journal unit since the most recent boot: journalctl -b -1 


Command to remove all archived journal files except the most recent two: journalctl --lines=2


Command to filter all log messages with priority levels between zero and two, and save output to /home/sysadmin/Priority_High.txt: sudo journalctl -p 0..2 >> /home/sysadmin/Priority_High.txt


Command to automate the last command in a daily cronjob. Add the edits made to the crontab file below: 
0 0 * * *  journalctl -p 0..2 >> ~/Priority_High.txt
